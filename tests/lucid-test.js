import { test } from 'tape';
import {
    findMatches,
    findMatchesHtml,
    findMatchesNormalized,
    findMatchesHtmlNormalized,
} from '../src/examples/index';

test('Lucid finds the correct matches', (t) => {
    const haystack = 'The quick brown fox jumps over the lazy dog';
    const needle = 'The dog';
    const found = findMatches(haystack, needle);

    t.deepEquals(found.matches, ['The', 'the', 'dog']);
    t.equals(found.matches.length, 3);
    t.end();
});

test('Lucid finds the correct emojis', (t) => {
    const haystack = 'üòã üòõ üòù üòú ü§™ ü§® üßê ü§ì üòé';
    const needle = 'üòé';
    const found = findMatches(haystack, needle);

    t.deepEquals(found.matches, ['üòé']);
    t.equals(found.matches.length, 1);
    t.end();
});

test('Lucid highlights correctly', (t) => {
    const haystack = 'The quick brown fox jumps over the lazy dog';
    const needle = 'The dog';
    const found = findMatches(haystack, needle);

    t.equals(found.mark, '<span class="matched">The</span> quick brown fox jumps over <span class="matched">the</span> lazy <span class="matched">dog</span>');
    t.end();
});

test('Lucid highlights correctly with options', (t) => {
    const haystack = 'The quick brown fox jumps over the lazy dog';
    const needle = 'The dog';
    const options = { el: 'mark', cssClass: 'found' };
    const found = findMatches(haystack, needle, options);

    t.equals(found.mark, '<mark class="found">The</mark> quick brown fox jumps over <mark class="found">the</mark> lazy <mark class="found">dog</mark>');
    t.end();
});

test('Lucid finds the correct matches in HTML string', (t) => {
    const haystack = 'The quick brown <strong>fox</strong> jumps over the lazy <div>dog</div>';
    const needle = 'The dog strong div';
    const found = findMatchesHtml(haystack, needle);

    t.deepEquals(found.matches, ['The', 'the', 'dog']);
    t.equals(found.matches.length, 3);
    t.end();
});

test('Lucid highlights HTML strings correctly', (t) => {
    const haystack = 'The quick brown <strong>fox</strong> jumps over the lazy <div>dog</div>';
    const needle = 'The dog strong div';
    const found = findMatchesHtml(haystack, needle);

    t.equals(found.mark, '<span class="matched">The</span> quick brown <strong>fox</strong> jumps over <span class="matched">the</span> lazy <div><span class="matched">dog</span></div>');
    t.end();
});

test('Lucid finds the correct matches with special characters like √§√∂√º√®', (t) => {
    const haystack = 'Th√© quƒ´√ßk brown f√∏x j√ºmps over the l√•zy dog';
    const needle = 'Th√´ dog';
    const found = findMatchesNormalized(haystack, needle);

    t.deepEquals(found.matches, ['Th√©', 'the', 'dog']);
    t.equals(found.matches.length, 3);
    t.end();
});

test('Lucid highlights HTML strings correctly with special characters like √§√∂√º√®', (t) => {
    const haystack = 'Th√© quƒ´√ßk brown <strong>f√∏x</strong> j√ºmps over the l√•zy <div>dog</div>';
    const needle = 'The dog strong div';
    const found = findMatchesHtmlNormalized(haystack, needle);

    t.equals(found.mark, '<span class="matched">Th√©</span> quƒ´√ßk brown <strong>f√∏x</strong> j√ºmps over <span class="matched">the</span> l√•zy <div><span class="matched">dog</span></div>');
    t.end();
});

test('Lucid highlights HTML strings correctly with special characters like √§√∂√º√®', (t) => {
    const haystack = 'Th√© quƒ´√ßk brown <strong>f√∏x</strong> j√ºmps over the l√•zy <div>dog</div>';
    const needle = 'The dog strong div';
    const found = findMatchesHtmlNormalized(haystack, needle);

    t.deepEquals(found.matches, ['Th√©', 'the', 'dog']);
    t.equals(found.matches.length, 3);
    t.end();
});
