{{#if example0}}
<div id="haystack">{{{haystack}}}</div>
<input id="needle" placeholder="Type to search...." type="text">
<div id="result">Nothing matched, sorry</div>

<script type="text/javascript">
document.addEventListener('DOMContentLoaded', () => {
    const haystack = document.querySelector('#haystack').innerHTML.trim();

    /*
        Listen for input
    */
    document.querySelector('#needle').addEventListener('input', (e) => {
        /*
            Pass user input as needle
        */
        const needle = e.target.value;
        const found = lucidSearch.{{method}}(haystack, needle);

        /*
            Display results
        */
        document.querySelector('#haystack').innerHTML = found.mark;
        document.querySelector('#result').innerHTML = found.matches.length > 0
            ? `<strong>${found.matches.length}</strong> match(es) were found`
            : 'Nothing matched, sorry';
    });
});
</script>

<style type="text/css">
#haystack {
    color: #aaa;
    font-size: 1.5rem;
    font-style: italic;
    padding: 2rem;
    text-align: center;
}

#needle {
    margin: 0 auto;
    max-width: 50%;
    padding: 1rem;
    width: 50%;
}

#result {
    color: #000;
    padding: 0.5rem;
    text-align: center;
}

.matched {
    color: #000;
}
</style>
{{/if}}


{{#if example1}}
<div id="haystack">{{{haystack}}}</div>
<input id="needle" placeholder="Type to search...." type="text">
<div id="result">Nothing matched, sorry</div>

<script type="text/javascript">
document.addEventListener('DOMContentLoaded', () => {
    const haystack = document.querySelector('#haystack').innerHTML.trim();

    /*
        Listen for input
    */
    document.querySelector('#needle').addEventListener('input', (e) => {
        const needle = e.target.value.trim();
        let found = null;

        /*
            When needle is longer than two characters use custom splitting,
            otherwise use default behaviour
        */
        if(needle.length > 2) {
            /*
                Use https://github.com/words/n-gram to split up needle into ngrams
                Now you can search for "brwn fox jmps" and you get correct matches
            */
            const ngram2 = nGram(2)(needle);
            const ngram3 = nGram(3)(needle);

            const needles = ngram2.concat(ngram3);

            found = lucidSearch.{{method}}(haystack, needles);
        } else {
            found = lucidSearch.findMatches(haystack, e.target.value);
        }

        /*
            Display results
        */
        document.querySelector('#haystack').innerHTML = found.mark;
        document.querySelector('#result').innerHTML = found.matches.length > 0
            ? `<strong>${found.matches.length}</strong> match(es) were found`
            : 'Nothing matched, sorry';
    });
});
</script>

<style type="text/css">
#haystack {
    color: #aaa;
    font-size: 1.5rem;
    font-style: italic;
    padding: 2rem;
    text-align: center;
}

#needle {
    margin: 0 auto;
    max-width: 50%;
    padding: 1rem;
    width: 50%;
}

#result {
    color: #000;
    padding: 0.5rem;
    text-align: center;
}

.matched {
    color: #000;
}
</style>
{{/if}}


{{#if example2}}
<div id="stats">Search to see performance</div>
<input id="needle" placeholder="Type to search...." type="text">
<ul id="results"></ul>

<script type="text/javascript">

document.addEventListener('DOMContentLoaded', async() => {
    /*
        Here you can control in which order the results are displayed
        For instance, in this case the name is ranked higher than the website
    */
    function sort(a, b) {
        const scoreA = (a.foundCompanyName.matches.length * 5) + a.foundWebsite.matches.length;
        const scoreB = (b.foundCompanyName.matches.length * 5) + b.foundWebsite.matches.length;
        return scoreB - scoreA;
    }

    /*
        Fetch data
    */
    const response = await fetch('../../fakeData.json');
    const data = await response.json();

    /*
        Listen for input
    */
    document.querySelector('#needle').addEventListener('input', (e) => {
        /*
            Get t0 for performance
        */
        const t0 = window.performance.now()
        const needle = e.target.value.trim();

        /*
            Search each company
        */
        const results = data.map(d => ({
            ...d,
            foundCompanyName: lucidSearch.{{method}}(d.companyName, needle),
            foundWebsite: lucidSearch.{{method}}(d.website, needle),
        }))
        .filter(r => (r.foundCompanyName.matches.length > 0 ||Â r.foundWebsite.matches.length > 0))
        .sort(sort);

        /*
            Create result list
        */
        let list = '';

        for (let i = 0; i < results.slice(0, 10).length; i++) {
            list += `<li>
                <div>${results[i].foundCompanyName.mark}</div>
                <small>${results[i].foundWebsite.mark}</small>
            </li>`;
        }

        /*
            Append list
        */
        document.querySelector('#results').innerHTML = list;

        /*
            Show performance
        */
        const t1 = window.performance.now();
        document.querySelector('#stats').innerHTML = `Searched ${data.length} companies in <strong>${Number.parseInt(t1 - t0, 10)}</strong>ms and found <strong>${results.length}</strong> matches`;
    });

});
</script>

<style type="text/css">
#stats {
    font-size: 0.6rem;
    text-align: center;
    padding: 1rem;
}

#needle {
    border: 1px solid #ccc;
    margin: 0 auto;
    max-width: 50%;
    padding: 1rem;
    width: 50%;
    box-sizing: border-box;
    border-radius: 2px;
}

#results {
    color: #000;
    list-style: none;
    margin: 0 auto;
    max-width: 50%;;
    padding: 0rem 0rem;
    width: 50%;
}

li {
    border-radius: 2px;
    box-sizing: border-box;
    border: 1px solid #ccc;
    padding: 0.5rem;
    margin: 0.5rem 0;
}

.matched {
    background-color: #e91e63;
    color: #fff;
}
</style>
{{/if}}
