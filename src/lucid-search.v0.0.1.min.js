!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.lucidSearch=e():n.lucidSearch=e()}(window,(function(){return function(n){var e={};function t(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=n,t.c=e,t.d=function(n,e,s){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:s})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)t.d(s,a,function(e){return n[e]}.bind(null,a));return s},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s="./src/examples/index.js")}({"./src/examples/index.js":
/*!*******************************!*\
  !*** ./src/examples/index.js ***!
  \*******************************/
/*! exports provided: findMatchesNormalized, findMatchesHtmlNormalized, findMatchesHtml, findMatches */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findMatchesNormalized\", function() { return findMatchesNormalized; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findMatchesHtmlNormalized\", function() { return findMatchesHtmlNormalized; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findMatchesHtml\", function() { return findMatchesHtml; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findMatches\", function() { return findMatches; });\nconst defaultOptions = { el: 'span', cssClass: 'matched' };\nconst split = /[.\\-_\\s]/;\n\nfunction normalize(string) {\n    return string\n        .replace(/a|æ|ä|å|á|à|ã|â|ā/gi, '[aæäåáàãâā]')\n        .replace(/c|ç|č|ć/gi, '[cçčć]')\n        .replace(/e|é|ê|è|ë|ē|ė/gi, '[eéêèëēė]')\n        .replace(/i|î|ï|í|ī|ì/gi, '[iîïíīì]')\n        .replace(/o|œ|ö|ó|õ|ô|ò|ø|ō/gi, '[oœöóõôòøō]')\n        .replace(/s|ś|š|ß/gi, '[sśšß]')\n        .replace(/u|ü|ù|ú|ŭ|ū|û/gi, '[uüùúŭūû]');\n}\n\nfunction findHTML(haystack, needles, options) {\n    let newHaystack = haystack;\n\n    const {\n        el,\n        cssClass,\n    } = options;\n\n    const matches = needles.map((n) => {\n        if (!n) return null;\n        return haystack.match(new RegExp(`(${n})(?!([^<]+)?>)`, 'gi'));\n    }).flat().filter(d => d !== null);\n\n    newHaystack = newHaystack.replace(\n        new RegExp(\n            `(${matches.join('|')})(?!([^<]+)?>)`, 'gi',\n        ),\n        s => `<${el} class=\"${cssClass}\">${s}</${el}>`,\n    );\n\n    return {\n        matches,\n        mark: matches.length > 0\n            ? newHaystack\n            : haystack,\n    };\n}\n\nfunction find(haystack, needles, options) {\n    let newHaystack = haystack;\n\n    const {\n        el,\n        cssClass,\n    } = options;\n\n    const matches = needles.map((n) => {\n        if (!n) return null;\n        return haystack.match(new RegExp(n, 'gi'));\n    }).flat().filter(d => d !== null);\n\n    newHaystack = newHaystack.replace(\n        new RegExp(matches.join('|'), 'gi'),\n        s => `<${el} class=\"${cssClass}\">${s}</${el}>`,\n    );\n\n    return {\n        matches,\n        mark: matches.length > 0\n            ? newHaystack\n            : haystack,\n    };\n}\n\nfunction findMatchesNormalized(haystack, needle, options = defaultOptions) {\n    const needles = normalize(needle).split(split);\n\n    return find(haystack, needles, options);\n}\n\nfunction findMatchesHtmlNormalized(haystack, needle, options = defaultOptions) {\n    const needles = normalize(needle).split(split);\n\n    return findHTML(haystack, needles, options);\n}\n\nfunction findMatchesHtml(haystack, needle, options = defaultOptions) {\n    const needles = needle.split(split);\n\n    return findHTML(haystack, needles, options);\n}\n\nfunction findMatches(haystack, needle, options = defaultOptions) {\n    const needles = needle.split(split);\n\n    return find(haystack, needles, options);\n}\n\n\n//# sourceURL=webpack://lucidSearch/./src/examples/index.js?")}})}));