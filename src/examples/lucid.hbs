{{#if example0}}
<div id="haystack">{{{haystack}}}</div>
<input id="needle" placeholder="Type to search...." type="text">
<div id="result">Nothing matched, sorry</div>

<script type="text/javascript">
 document.addEventListener('DOMContentLoaded', () => {
    const haystack = document.querySelector('#haystack').innerHTML.trim();

    /*
        Listen for input
    */
    document.querySelector('#needle').addEventListener('input', (e) => {
        /*
            Pass user input as needle
        */
        const needle = e.target.value;
        const found = lucidSearch.{{method}}(haystack, needle);

        /*
            Display results
        */
        document.querySelector('#haystack').innerHTML = found.mark;
        document.querySelector('#result').innerHTML = found.matches.length > 0
            ? `<strong>${found.matches.length}</strong> match(es) were found`
            : 'Nothing matched, sorry';
    });
});
</script>

<style type="text/css">
#haystack {
    color: #aaa;
    font-size: 1.5rem;
    font-style: italic;
    padding: 2rem;
    text-align: center;
}

#needle {
    margin: 0 auto;
    max-width: 50%;
    padding: 1rem;
    width: 50%;
}

#result {
    color: #000;
    padding: 0.5rem;
    text-align: center;
}

.matched {
    color: #000;
}
</style>
{{/if}}


{{#if example1}}
<div id="haystack">{{{haystack}}}</div>
<input id="needle" placeholder="Type to search...." type="text">
<div id="result">Nothing matched, sorry</div>

<script type="text/javascript">
 document.addEventListener('DOMContentLoaded', () => {
    const haystack = document.querySelector('#haystack').innerHTML.trim();

    /*
        Listen for input
    */
    document.querySelector('#needle').addEventListener('input', (e) => {
        const needle = e.target.value.trim();
        let found = null;

        /*
            When needle is longer than two characters use custom splitting,
            otherwise use default behaviour
        */
        if(needle.length >= 2) {
            /*
                Use https://github.com/words/n-gram to split up needle into ngrams
                Now you can search for "brwn fox jmps" and you get correct matches
            */
            const needles = nGram(2)(needle).map(d => d.trim());

            found = lucidSearch.{{method}}(haystack, needles);
        } else {
            found = lucidSearch.findMatches(haystack, e.target.value);
        }

        /*
            Display results
        */
        document.querySelector('#haystack').innerHTML = found.mark;
        document.querySelector('#result').innerHTML = found.matches.length > 0
            ? `<strong>${found.matches.length}</strong> match(es) were found`
            : 'Nothing matched, sorry';
    });
});
</script>

<style type="text/css">
#haystack {
    color: #aaa;
    font-size: 1.5rem;
    font-style: italic;
    padding: 2rem;
    text-align: center;
}

#needle {
    margin: 0 auto;
    max-width: 50%;
    padding: 1rem;
    width: 50%;
}

#result {
    color: #000;
    padding: 0.5rem;
    text-align: center;
}

.matched {
    color: #000;
}
</style>
{{/if}}
